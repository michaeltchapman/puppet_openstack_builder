# An example where two regions share keystone and glance
openstacklib::openstack::regions::regions_hash:
  RegionOne:
    public_ip: 10.2.3.105
    private_ip: 10.3.3.105
    services:
      - heat
      - nova
      - neutron
      - cinder
      - ec2
  RegionTwo:
    public_ip: 10.2.3.205
    private_ip: 10.3.3.205
    services:
      - heat
      - nova
      - neutron
      - cinder
      - ec2
  shared:
    public_ip: 10.2.3.5
    private_ip: 10.3.3.5
    services:
      - keystone
      - glance

# This will create the correct databases for the region controller
# normally this would also make endpoints, but that is covered
# by the above region hash in multi-region environments
enabled_services: &enabled_services
  - glance
  - keystone

openstacklib::openstack::regions::nova_user_pw: "%{hiera('nova_service_password')}"
openstacklib::openstack::regions::neutron_user_pw:  "%{hiera('network_service_password')}"
openstacklib::openstack::regions::glance_user_pw:  "%{hiera('glance_service_password')}"
openstacklib::openstack::regions::heat_user_pw:  "%{hiera('heat_service_password')}"
openstacklib::openstack::regions::cinder_user_pw: "%{hiera('cinder_service_password')}"
openstacklib::openstack::regions::ceilometer_user_pw: "%{hiera('ceilometer_service_password')}"

# The default network config is as follows:
# eth0: vagrant network in testing
# eth1: deploy network
# eth2: public api network
# eth3: private service network + GRE
# eth4: external data network

build_server_name: build-server
build_server_ip: 192.168.242.100

# These are legacy mappings, and should have no effect
controller_public_address: 10.2.3.5
controller_internal_address: 10.3.3.5
controller_admin_address: 10.3.3.5

# This is the interface that each node will be binding
# various services on.
deploy_bind_ip: "%{ipaddress_eth1}"
public_bind_ip: "%{ipaddress_eth2}"
private_bind_ip: "%{ipaddress_eth3}"

# The public VIP, where all API services are exposed to users.
public_vip: 10.2.3.5

# The private VIP, where internal services are exposed to openstack services.
private_vip: 10.3.3.5

# List of IP addresses for controllers on the public network
control_servers_public: &control_servers_public  [ '10.2.3.10', '10.2.3.11', '10.2.3.12']

# List of IP addresses for controllers on the private network
control_servers_private: &control_servers_private  [ '10.3.3.10', '10.3.3.11', '10.3.3.12']

# A hash of hostnames to private network IPs. Used for rabbitmq hosts
# resolution
openstacklib::hosts::cluster_hash:
  regcon1private:
    ip: '10.3.3.10'
  regcon2private:
    ip: '10.3.3.11'
  regcon3private:
    ip: '10.3.3.12'

# List of controller hostnames. Used for rabbitmq hosts list
cluster_names: &cluster_names  [ 'regcon1private', 'regcon2private', 'regcon3private' ]

horizon::wsgi::apache::bind_address: "%{ipaddress_eth2}"

# Use these to set an apt proxy if running on a Debian-like
apt::proxy_host: 192.168.0.18
apt::proxy_port: 8000

# This node will be used to bootstrap the cluster on initial deployment
# or if there is a total failure of the control cluster
galera::galera_master: 'regcon1.domain.name'

# Database allowed hosts
allowed_hosts: 10.3.3.%

# Allowed cidrs for the different interfaces. Only
# Ports used by openstack will be allowed
deploy_control_firewall_source: '192.168.242.0/24'
public_control_firewall_source: '10.2.3.0/24'
private_control_firewall_source: '10.3.3.0/24'

# Proxy configuration of either apt or yum
openstacklib::repo::apt_proxy_host: '192.168.0.18'
openstacklib::repo::apt_proxy_port: '8000'
openstacklib::repo::yum_http_proxy: 'http://192.168.0.18:8000'
openstacklib::repo::yum_epel_mirror: 'http://mirror.aarnet.edu.au'
openstacklib::repo::yum_base_mirror: 'http://mirror.aarnet.edu.au'

#########################################
# Anchor mappings for non-string elements
#########################################

openstacklib::loadbalance::haproxy::cluster_names: *cluster_names
openstacklib::loadbalance::haproxy::dashboard::cluster_names: *cluster_names
openstacklib::loadbalance::haproxy::glance::cluster_names: *cluster_names
openstacklib::loadbalance::haproxy::keystone::cluster_names: *cluster_names
openstacklib::loadbalance::haproxy::mysql::cluster_names: *cluster_names

openstacklib::loadbalance::haproxy::dashboard::cluster_addresses: *control_servers_public
openstacklib::loadbalance::haproxy::glance::cluster_addresses: *control_servers_public
openstacklib::loadbalance::haproxy::keystone::cluster_addresses: *control_servers_public

openstacklib::loadbalance::haproxy::mysql::cluster_addresses: *control_servers_private
galera::galera_servers: *control_servers_private

openstacklib::openstack::databases::enabled_services: *enabled_services
